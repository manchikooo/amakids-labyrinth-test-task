{"ast":null,"code":"var _jsxFileName = \"/Users/manchiko/amakids-labyrinth-test-task/src/components/Matrix/Matrix.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { MatrixBlock, MatrixColumn, MatrixRow, MatrixWrapper } from \"./MatrixStyles\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { createMatrixAC, setMatrixSizeAC, setStartCoordinatesAC } from \"../../state/reducer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Matrix = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const [movesArr, setMovesArr] = useState([]);\n  const matrix = useSelector(state => state.matrix.matrix);\n  const matrixSize = useSelector(state => state.matrix.matrixSize);\n  const startCoordinates = useSelector(state => state.matrix.startPoint);\n  const endCoordinates = useSelector(state => state.matrix.endPoint);\n  console.log('END ', endCoordinates); // console.log('START ', startCoordinates)\n\n  const matrixSizeHandler = e => {\n    dispatch(setMatrixSizeAC(Number(e.currentTarget.value)));\n  };\n\n  const matrixStart = matrixSize => {\n    dispatch(setStartCoordinatesAC(matrixSize));\n    matrixMove();\n  };\n\n  const matrixMove = function () {\n    let moves = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 5;\n\n    // debugger\n    if (endCoordinates.row !== 0) {\n      console.log(endCoordinates.row);\n      console.log('1st if ', endCoordinates.row);\n      setMovesArr(moveArr => [...moveArr, 'moveUp']); // dispatch(moveUpAC())\n    }\n\n    if (endCoordinates.row !== matrix.length - 1) {\n      console.log('2st if ', endCoordinates.row);\n      setMovesArr(moveArr => [...moveArr, 'moveDown']); // dispatch(moveDownAC())\n    }\n\n    if (endCoordinates.column !== 0) {\n      console.log('3th if ', endCoordinates.column);\n      setMovesArr(moveArr => [...moveArr, 'moveLeft']); // dispatch(moveLeftAC())\n    }\n\n    if (endCoordinates.column !== matrix.length - 1) {\n      console.log('4th if ', endCoordinates.column);\n      setMovesArr(moveArr => [...moveArr, 'moveRight']); // dispatch(moveRightAC())\n    }\n  };\n\n  console.log(movesArr);\n  useEffect(() => {\n    dispatch(createMatrixAC(matrixSize));\n  }, [matrixSize]);\n  return /*#__PURE__*/_jsxDEV(MatrixWrapper, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      value: matrixSize,\n      onChange: matrixSizeHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => matrixStart(matrixSize),\n      children: \"\\u043D\\u0430\\u0447\\u0430\\u0442\\u044C \\u0438\\u0433\\u0440\\u0443\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(MatrixBlock, {\n      children: matrix.map((row, rowIndex) => {\n        return /*#__PURE__*/_jsxDEV(MatrixRow, {\n          children: matrix[rowIndex].map((column, columnIndex) => /*#__PURE__*/_jsxDEV(MatrixColumn, {\n            rowIndex: rowIndex,\n            startRow: startCoordinates.row,\n            endRow: endCoordinates.row,\n            startColumn: startCoordinates.column,\n            endColumn: endCoordinates.column,\n            columnIndex: columnIndex,\n            children: column\n          }, columnIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 29\n          }, this))\n        }, rowIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 28\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Matrix, \"m6YLSopgThLirmJXDBBRpcvpHSA=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = Matrix;\n\nconst getRandomPoint = matrixSize => {\n  const row = Math.round(Math.random() * (matrixSize - 1));\n  const col = Math.round(Math.random() * (matrixSize - 1));\n  return {\n    row,\n    col\n  };\n};\n\nconst getMovesAmount = matrixSize => {\n  const movesAmount = 10 + (matrixSize - 3) * 5;\n  return Math.max(10, movesAmount); // minimum 10 turns\n};\n\nconst getNextMove = (startPosition, matrixSize) => {\n  const possibleMoves = [];\n\n  if (startPosition.row !== 0) {\n    possibleMoves.push({ ...startPosition,\n      dir: 'moveUp',\n      row: startPosition.row - 1\n    });\n  }\n\n  if (startPosition.row !== matrixSize - 1) {\n    possibleMoves.push({ ...startPosition,\n      dir: 'moveDown',\n      row: startPosition.row + 1\n    });\n  }\n\n  if (startPosition.col !== 0) {\n    possibleMoves.push({ ...startPosition,\n      dir: 'moveLeft',\n      col: startPosition.col - 1\n    });\n  }\n\n  if (startPosition.col !== matrixSize - 1) {\n    possibleMoves.push({ ...startPosition,\n      dir: 'moveRight',\n      col: startPosition.col + 1\n    });\n  }\n\n  return possibleMoves[Math.round(Math.random() * (possibleMoves.length - 1))];\n};\n\nconst getPossibleMoves = function (startPosition, matrixSize, movesLeft) {\n  let moves = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n\n  if (movesLeft > 0) {\n    const {\n      dir,\n      col,\n      row\n    } = getNextMove(startPosition, matrixSize);\n    return getPossibleMoves({\n      dir,\n      col,\n      row\n    }, matrixSize, movesLeft - 1, [...moves, dir]);\n  } else {\n    return {\n      moves,\n      endPosition: startPosition\n    };\n  }\n}; // export const Matrix = () => {\n//     const [matrixSize, setMatrixSize] = useState(3);\n//     const [startPosition, setStartPosition] = useState<{dir?: string|undefined, row: number; col: number; }>(\n//         getRandomPoint(matrixSize)\n//     );\n//     const [endPosition, setEndPosition] = useState<{ dir?: string, col: number, row: number }>({\n//         dir: '',\n//         col: 0,\n//         row: 0\n//     });\n//     const [possibleMoves, setPossibleMoves] = useState<Array<string>>([]);\n//\n//\n//     const matrixSizeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n//         setMatrixSize(Number(e.currentTarget.value));\n//         setStartPosition(getRandomPoint(matrixSize)); //start a new game\n//     };\n//\n//     const checkAnswer = ({col, row}: { col: number, row: number }) => {\n//         if (endPosition.col === col && endPosition.row === row) {\n//             alert('You won');\n//             setStartPosition(getRandomPoint(matrixSize)); //start a new game\n//         } else {\n//             alert('Looser');\n//         }\n//     };\n//\n//     useEffect(() => {\n//         const {moves, endPosition} = getPossibleMoves(\n//             startPosition,\n//             matrixSize,\n//             getMovesAmount(matrixSize)\n//         );\n//         setEndPosition(endPosition);\n//         setPossibleMoves(moves);\n//     }, [startPosition]);\n//\n//     return (\n//\n//         <MatrixWrapper>\n//             <input type='number'\n//                    value={matrixSize}\n//                    onChange={matrixSizeHandler}/>\n//             <button onClick={\n//                 // () => matrixStart(matrixSize)\n//                 () => setStartPosition(getRandomPoint(matrixSize))\n//             }>начать игру</button>\n//             <MatrixBlock>\n//                 {\n//                     matrix.map((row, rowIndex) => {\n//                         return <MatrixRow key={rowIndex}>\n//                             {matrix[rowIndex].map((column, columnIndex) =>\n//                                 <MatrixColumn\n//                                     onClick={() =>\n//                                         checkAnswer({col: columnIndex, row: rowIndex})}\n//                                     rowIndex={rowIndex}\n//                                     startRow={startCoordinates.row}\n//                                     endRow={endCoordinates.row}\n//                                     startColumn={startCoordinates.column}\n//                                     endColumn={endCoordinates.column}\n//                                     columnIndex={columnIndex}\n//                                     key={columnIndex}\n//                                 >\n//                                     {column}\n//                                 </MatrixColumn>)}\n//                         </MatrixRow>\n//                     })\n//                 }\n//             </MatrixBlock>\n//             <ol>\n//                 {possibleMoves.map((move,i) => (\n//                     <li key={i}>{move}</li>\n//                 ))}\n//             </ol>\n//         </MatrixWrapper>)}\n//         <div>\n//             <input\n//                 type=\"number\"\n//                 min={2}\n//                 value={matrixSize}\n//                 onChange={matrixSizeHandler}\n//             />\n//             <button onClick={() => setStartPosition(getRandomPoint(matrixSize))}>\n//                 начать игру\n//             </button>\n//             <div>\n//                 {Array.from(Array(matrixSize)).map((row, rowIndex) => {\n//                     return (\n//                         <div key={rowIndex} style={{display: 'flex'}}>\n//                             {Array.from(Array(matrixSize)).map((column, columnIndex) => (\n//                                 <button\n//                                     key={columnIndex}\n//                                     onClick={() =>\n//                                         checkAnswer({col: columnIndex, row: rowIndex})\n//                                     }\n//                                     style={{\n//                                         // @ts-ignore\n//                                         color:\n//                                             rowIndex === startPosition.row &&\n//                                             columnIndex === startPosition.col &&\n//                                             'green',\n//                                     }}\n//                                 >\n//                                     {columnIndex}\n//                                 </button>\n//                             ))}\n//                         </div>\n//                     );\n//                 })}\n//             </div>\n//             <ol>\n//                 {possibleMoves.map((move,i) => (\n//                     <li key={i}>{move}</li>\n//                 ))}\n//             </ol>\n//         </div>\n//     );\n// };\n// export default Matrix;\n\n\nvar _c;\n\n$RefreshReg$(_c, \"Matrix\");","map":{"version":3,"names":["React","useEffect","useState","MatrixBlock","MatrixColumn","MatrixRow","MatrixWrapper","useDispatch","useSelector","createMatrixAC","setMatrixSizeAC","setStartCoordinatesAC","Matrix","dispatch","movesArr","setMovesArr","matrix","state","matrixSize","startCoordinates","startPoint","endCoordinates","endPoint","console","log","matrixSizeHandler","e","Number","currentTarget","value","matrixStart","matrixMove","moves","row","moveArr","length","column","map","rowIndex","columnIndex","getRandomPoint","Math","round","random","col","getMovesAmount","movesAmount","max","getNextMove","startPosition","possibleMoves","push","dir","getPossibleMoves","movesLeft","endPosition"],"sources":["/Users/manchiko/amakids-labyrinth-test-task/src/components/Matrix/Matrix.tsx"],"sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport {MatrixBlock, MatrixColumn, MatrixRow, MatrixWrapper} from \"./MatrixStyles\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../state/store\";\nimport {createMatrixAC, PointType, setMatrixSizeAC, setStartCoordinatesAC,} from \"../../state/reducer\";\n\nexport const Matrix = () => {\n    const dispatch = useDispatch()\n    const [movesArr, setMovesArr] = useState<Array<string>>([])\n    const matrix = useSelector<AppRootStateType, Array<Array<number>>>(state => state.matrix.matrix)\n    const matrixSize = useSelector<AppRootStateType, number>(state => state.matrix.matrixSize)\n    const startCoordinates = useSelector<AppRootStateType, PointType>(state => state.matrix.startPoint)\n    const endCoordinates = useSelector<AppRootStateType, PointType>(state => state.matrix.endPoint)\n    console.log('END ', endCoordinates)\n    // console.log('START ', startCoordinates)\n    const matrixSizeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n        dispatch(setMatrixSizeAC(Number(e.currentTarget.value)))\n    }\n    const matrixStart = (matrixSize: number) => {\n        dispatch(setStartCoordinatesAC(matrixSize))\n        matrixMove()\n    }\n\n    const matrixMove = (moves: number = 5) => {\n        // debugger\n        if (endCoordinates.row !== 0) {\n            console.log(endCoordinates.row)\n            console.log('1st if ', endCoordinates.row)\n            setMovesArr(moveArr => ([...moveArr, 'moveUp']))\n            // dispatch(moveUpAC())\n        }\n        if (endCoordinates.row !== matrix.length - 1) {\n            console.log('2st if ', endCoordinates.row)\n            setMovesArr(moveArr => ([...moveArr, 'moveDown']))\n            // dispatch(moveDownAC())\n        }\n        if (endCoordinates.column !== 0) {\n            console.log('3th if ', endCoordinates.column)\n            setMovesArr(moveArr => ([...moveArr, 'moveLeft']))\n            // dispatch(moveLeftAC())\n        }\n        if (endCoordinates.column !== matrix.length - 1) {\n            console.log('4th if ', endCoordinates.column)\n            setMovesArr(moveArr => ([...moveArr, 'moveRight']))\n            // dispatch(moveRightAC())\n        }\n    }\nconsole.log(movesArr)\nuseEffect(() => {\n    dispatch(createMatrixAC(matrixSize))\n}, [matrixSize])\n\nreturn (\n    <MatrixWrapper>\n        <input type='number'\n               value={matrixSize}\n               onChange={matrixSizeHandler}/>\n        <button onClick={() => matrixStart(matrixSize)}>начать игру</button>\n        <MatrixBlock>\n            {\n                matrix.map((row, rowIndex) => {\n                    return <MatrixRow key={rowIndex}>\n                        {matrix[rowIndex].map((column, columnIndex) =>\n                            <MatrixColumn\n                                rowIndex={rowIndex}\n                                startRow={startCoordinates.row}\n                                endRow={endCoordinates.row}\n                                startColumn={startCoordinates.column}\n                                endColumn={endCoordinates.column}\n                                columnIndex={columnIndex}\n                                key={columnIndex}\n                            >\n                                {column}\n                            </MatrixColumn>)}\n                    </MatrixRow>\n                })\n            }\n        </MatrixBlock>\n    </MatrixWrapper>\n);\n}\n\n\n\n\n\n\nconst getRandomPoint = (matrixSize: number) => {\n    const row = Math.round(Math.random() * (matrixSize - 1));\n    const col = Math.round(Math.random() * (matrixSize - 1));\n    return {row, col};\n};\n\nconst getMovesAmount = (matrixSize: number) => {\n    const movesAmount = 10 + (matrixSize - 3) * 5;\n    return Math.max(10, movesAmount); // minimum 10 turns\n};\n\nconst getNextMove = (startPosition: { dir?: string | undefined, row: number, col: number }, matrixSize: number) => {\n    const possibleMoves = [];\n    if (startPosition.row !== 0) {\n        possibleMoves.push({\n            ...startPosition,\n            dir: 'moveUp',\n            row: startPosition.row - 1,\n        });\n    }\n    if (startPosition.row !== matrixSize - 1) {\n        possibleMoves.push({\n            ...startPosition,\n            dir: 'moveDown',\n            row: startPosition.row + 1,\n        });\n    }\n    if (startPosition.col !== 0) {\n        possibleMoves.push({\n            ...startPosition,\n            dir: 'moveLeft',\n            col: startPosition.col - 1,\n        });\n    }\n    if (startPosition.col !== matrixSize - 1) {\n        possibleMoves.push({\n            ...startPosition,\n            dir: 'moveRight',\n            col: startPosition.col + 1,\n        });\n    }\n\n    return possibleMoves[Math.round(Math.random() * (possibleMoves.length - 1))];\n};\n\n\nconst getPossibleMoves = (startPosition:\n                              { dir?: string | undefined, row: number, col: number },\n                          matrixSize: number,\n                          movesLeft: number,\n                          moves: Array<string> = []): { endPosition: { dir?: string | undefined; row: number; col: number }; moves: Array<string> } => {\n    if (movesLeft > 0) {\n        const {dir, col, row} = getNextMove(startPosition, matrixSize);\n        return getPossibleMoves({dir, col, row}, matrixSize, movesLeft - 1, [\n            ...moves,\n            dir,\n        ]);\n    } else {\n        return {moves, endPosition: startPosition};\n    }\n};\n\n// export const Matrix = () => {\n//     const [matrixSize, setMatrixSize] = useState(3);\n//     const [startPosition, setStartPosition] = useState<{dir?: string|undefined, row: number; col: number; }>(\n//         getRandomPoint(matrixSize)\n//     );\n//     const [endPosition, setEndPosition] = useState<{ dir?: string, col: number, row: number }>({\n//         dir: '',\n//         col: 0,\n//         row: 0\n//     });\n//     const [possibleMoves, setPossibleMoves] = useState<Array<string>>([]);\n//\n//\n//     const matrixSizeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n//         setMatrixSize(Number(e.currentTarget.value));\n//         setStartPosition(getRandomPoint(matrixSize)); //start a new game\n//     };\n//\n//     const checkAnswer = ({col, row}: { col: number, row: number }) => {\n//         if (endPosition.col === col && endPosition.row === row) {\n//             alert('You won');\n//             setStartPosition(getRandomPoint(matrixSize)); //start a new game\n//         } else {\n//             alert('Looser');\n//         }\n//     };\n//\n//     useEffect(() => {\n//         const {moves, endPosition} = getPossibleMoves(\n//             startPosition,\n//             matrixSize,\n//             getMovesAmount(matrixSize)\n//         );\n//         setEndPosition(endPosition);\n//         setPossibleMoves(moves);\n//     }, [startPosition]);\n//\n//     return (\n//\n//         <MatrixWrapper>\n//             <input type='number'\n//                    value={matrixSize}\n//                    onChange={matrixSizeHandler}/>\n//             <button onClick={\n//                 // () => matrixStart(matrixSize)\n//                 () => setStartPosition(getRandomPoint(matrixSize))\n//             }>начать игру</button>\n//             <MatrixBlock>\n//                 {\n//                     matrix.map((row, rowIndex) => {\n//                         return <MatrixRow key={rowIndex}>\n//                             {matrix[rowIndex].map((column, columnIndex) =>\n//                                 <MatrixColumn\n//                                     onClick={() =>\n//                                         checkAnswer({col: columnIndex, row: rowIndex})}\n//                                     rowIndex={rowIndex}\n//                                     startRow={startCoordinates.row}\n//                                     endRow={endCoordinates.row}\n//                                     startColumn={startCoordinates.column}\n//                                     endColumn={endCoordinates.column}\n//                                     columnIndex={columnIndex}\n//                                     key={columnIndex}\n//                                 >\n//                                     {column}\n//                                 </MatrixColumn>)}\n//                         </MatrixRow>\n//                     })\n//                 }\n//             </MatrixBlock>\n//             <ol>\n//                 {possibleMoves.map((move,i) => (\n//                     <li key={i}>{move}</li>\n//                 ))}\n//             </ol>\n//         </MatrixWrapper>)}\n\n\n//         <div>\n//             <input\n//                 type=\"number\"\n//                 min={2}\n//                 value={matrixSize}\n//                 onChange={matrixSizeHandler}\n//             />\n//             <button onClick={() => setStartPosition(getRandomPoint(matrixSize))}>\n//                 начать игру\n//             </button>\n//             <div>\n//                 {Array.from(Array(matrixSize)).map((row, rowIndex) => {\n//                     return (\n//                         <div key={rowIndex} style={{display: 'flex'}}>\n//                             {Array.from(Array(matrixSize)).map((column, columnIndex) => (\n//                                 <button\n//                                     key={columnIndex}\n//                                     onClick={() =>\n//                                         checkAnswer({col: columnIndex, row: rowIndex})\n//                                     }\n//                                     style={{\n//                                         // @ts-ignore\n//                                         color:\n//                                             rowIndex === startPosition.row &&\n//                                             columnIndex === startPosition.col &&\n//                                             'green',\n//                                     }}\n//                                 >\n//                                     {columnIndex}\n//                                 </button>\n//                             ))}\n//                         </div>\n//                     );\n//                 })}\n//             </div>\n//             <ol>\n//                 {possibleMoves.map((move,i) => (\n//                     <li key={i}>{move}</li>\n//                 ))}\n//             </ol>\n//         </div>\n//     );\n// };\n\n// export default Matrix;\n"],"mappings":"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},"metadata":{},"sourceType":"module"}