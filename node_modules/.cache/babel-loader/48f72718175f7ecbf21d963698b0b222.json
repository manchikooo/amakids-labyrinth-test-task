{"ast":null,"code":"var _jsxFileName = \"/Users/manchiko/amakids-labyrinth-test-task/src/components/Matrix/Matrix.tsx\",\n    _s = $RefreshSig$();\n\n// import React, {useEffect, useState} from \"react\";\n// import {MatrixBlock, MatrixColumn, MatrixRow, MatrixWrapper} from \"./MatrixStyles\";\n// import {useDispatch, useSelector} from \"react-redux\";\n// import {AppRootStateType} from \"../../state/store\";\n// import {createMatrixAC, PointType, setMatrixSizeAC, setStartCoordinatesAC,} from \"../../state/reducer\";\n//\n// export const Matrix = () => {\n//     const dispatch = useDispatch()\n//     const [movesArr, setMovesArr] = useState<Array<string>>([])\n//     const matrix = useSelector<AppRootStateType, Array<Array<number>>>(state => state.matrix.matrix)\n//     const matrixSize = useSelector<AppRootStateType, number>(state => state.matrix.matrixSize)\n//     const startCoordinates = useSelector<AppRootStateType, PointType>(state => state.matrix.startPoint)\n//     const endCoordinates = useSelector<AppRootStateType, PointType>(state => state.matrix.endPoint)\n//     console.log('END ', endCoordinates)\n//     // console.log('START ', startCoordinates)\n//     const matrixSizeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n//         dispatch(setMatrixSizeAC(Number(e.currentTarget.value)))\n//     }\n//     const matrixStart = (matrixSize: number) => {\n//         dispatch(setStartCoordinatesAC(matrixSize))\n//         matrixMove()\n//     }\n//\n//     const matrixMove = (moves: number = 5) => {\n//         // debugger\n//         if (endCoordinates.row !== 0) {\n//             console.log(endCoordinates.row)\n//             console.log('1st if ', endCoordinates.row)\n//             setMovesArr(moveArr => ([...moveArr, 'moveUp']))\n//             // dispatch(moveUpAC())\n//         }\n//         if (endCoordinates.row !== matrix.length - 1) {\n//             console.log('2st if ', endCoordinates.row)\n//             setMovesArr(moveArr => ([...moveArr, 'moveDown']))\n//             // dispatch(moveDownAC())\n//         }\n//         if (endCoordinates.column !== 0) {\n//             console.log('3th if ', endCoordinates.column)\n//             setMovesArr(moveArr => ([...moveArr, 'moveLeft']))\n//             // dispatch(moveLeftAC())\n//         }\n//         if (endCoordinates.column !== matrix.length - 1) {\n//             console.log('4th if ', endCoordinates.column)\n//             setMovesArr(moveArr => ([...moveArr, 'moveRight']))\n//             // dispatch(moveRightAC())\n//         }\n//     }\n//     console.log(movesArr)\n//\n//\n//     const getRandomPoint = (matrixSize: number) => {\n//         const row = Math.round(Math.random() * (matrixSize - 1));\n//         const col = Math.round(Math.random() * (matrixSize - 1));\n//         return {row, col};\n//     };\n//\n//     const getMovesAmount = (matrixSize: number) => {\n//         const movesAmount = 10 + (matrixSize - 3) * 5;\n//         return Math.max(10, movesAmount); // minimum 10 turns\n//     };\n//\n//     const getNextMove = (startPosition: { dir: string| undefined , row: number, col: number }, matrixSize: number) => {\n//         const possibleMoves = [];\n//         if (startPosition.row !== 0) {\n//             possibleMoves.push({\n//                 ...startPosition,\n//                 dir: 'moveUp',\n//                 row: startPosition.row - 1,\n//             });\n//         }\n//         if (startPosition.row !== matrixSize - 1) {\n//             possibleMoves.push({\n//                 ...startPosition,\n//                 dir: 'moveDown',\n//                 row: startPosition.row + 1,\n//             });\n//         }\n//         if (startPosition.col !== 0) {\n//             possibleMoves.push({\n//                 ...startPosition,\n//                 dir: 'moveLeft',\n//                 col: startPosition.col - 1,\n//             });\n//         }\n//         if (startPosition.col !== matrixSize - 1) {\n//             possibleMoves.push({\n//                 ...startPosition,\n//                 dir: 'moveRight',\n//                 col: startPosition.col + 1,\n//             });\n//         }\n//\n//         return possibleMoves[Math.round(Math.random() * (possibleMoves.length - 1))];\n//     };\n//\n//     const getPossibleMoves = (startPosition:\n//                                   { dir: string|undefined, row: number, col: number },\n//                               matrixSize: number,\n//                               movesLeft: number,\n//                               moves: Array<string> = []): { endPosition: { dir: string| undefined; row: number; col: number }; moves: Array<string> } => {\n//         if (movesLeft > 0) {\n//             const {dir, col, row} = getNextMove(startPosition, matrixSize);\n//             return getPossibleMoves({dir, col, row}, matrixSize, movesLeft - 1, [\n//                 ...moves,\n//                 dir,\n//             ]);\n//         } else {\n//             return {moves, endPosition: startPosition};\n//         }\n//     };\n//\n//     const Matrix = () => {\n//         const [matrixSize, setMatrixSize] = useState(3);\n//         const [startPosition, setStartPosition] = useState<{dir?: string|undefined, row: number; col: number; }>(\n//             getRandomPoint(matrixSize)\n//         );\n//         const [endPosition, setEndPosition] = useState<{dir?: string,col: number, row: number}>({dir: '',col: 0, row: 0});\n//         const [possibleMoves, setPossibleMoves] = useState<Array<string>>([]);\n//\n//         const matrixSizeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n//             setMatrixSize(Number(e.currentTarget.value));\n//             setStartPosition(getRandomPoint(matrixSize)); //start a new game\n//         };\n//\n//         const checkAnswer = ({col, row}: {col: number,row: number}) => {\n//             if (endPosition.col === col && endPosition.row === row) {\n//                 alert('You won');\n//                 setStartPosition(getRandomPoint(matrixSize)); //start a new game\n//             } else {\n//                 alert('Looser');\n//             }\n//         };\n//\n//         useEffect(() => {\n//             const {moves, endPosition} = getPossibleMoves(\n//                 startPosition,\n//                 matrixSize,\n//                 getMovesAmount(matrixSize)\n//             );\n//             setEndPosition(endPosition);\n//             setPossibleMoves(moves);\n//         }, [startPosition]);\n//\n//\n//         useEffect(() => {\n//             dispatch(createMatrixAC(matrixSize))\n//         }, [matrixSize])\n//\n//         return (\n//             <MatrixWrapper>\n//                 <input type='number'\n//                        value={matrixSize}\n//                        onChange={matrixSizeHandler}/>\n//                 <button onClick={() => matrixStart(matrixSize)}>начать игру</button>\n//                 <MatrixBlock>\n//                     {\n//                         matrix.map((row, rowIndex) => {\n//                             return <MatrixRow key={rowIndex}>\n//                                 {matrix[rowIndex].map((column, columnIndex) =>\n//                                     <MatrixColumn\n//                                         rowIndex={rowIndex}\n//                                         startRow={startCoordinates.row}\n//                                         endRow={endCoordinates.row}\n//                                         startColumn={startCoordinates.column}\n//                                         endColumn={endCoordinates.column}\n//                                         columnIndex={columnIndex}\n//                                         key={columnIndex}\n//                                     >\n//                                         {column}\n//                                     </MatrixColumn>)}\n//                             </MatrixRow>\n//                         })\n//                     }\n//                 </MatrixBlock>\n//             </MatrixWrapper>\n//         );\n//     }\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getRandomPoint = matrixSize => {\n  const row = Math.round(Math.random() * (matrixSize - 1));\n  const col = Math.round(Math.random() * (matrixSize - 1));\n  return {\n    row,\n    col\n  };\n};\n\nconst getMovesAmount = matrixSize => {\n  const movesAmount = 10 + (matrixSize - 3) * 5;\n  return Math.max(10, movesAmount); // minimum 10 turns\n};\n\nconst getNextMove = (startPosition, matrixSize) => {\n  const possibleMoves = [];\n\n  if (startPosition.row !== 0) {\n    possibleMoves.push({ ...startPosition,\n      dir: 'moveUp',\n      row: startPosition.row - 1\n    });\n  }\n\n  if (startPosition.row !== matrixSize - 1) {\n    possibleMoves.push({ ...startPosition,\n      dir: 'moveDown',\n      row: startPosition.row + 1\n    });\n  }\n\n  if (startPosition.col !== 0) {\n    possibleMoves.push({ ...startPosition,\n      dir: 'moveLeft',\n      col: startPosition.col - 1\n    });\n  }\n\n  if (startPosition.col !== matrixSize - 1) {\n    possibleMoves.push({ ...startPosition,\n      dir: 'moveRight',\n      col: startPosition.col + 1\n    });\n  }\n\n  return possibleMoves[Math.round(Math.random() * (possibleMoves.length - 1))];\n};\n\nconst getPossibleMoves = function (startPosition, matrixSize, movesLeft) {\n  let moves = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n\n  if (movesLeft > 0) {\n    const {\n      dir,\n      col,\n      row\n    } = getNextMove(startPosition, matrixSize);\n    return getPossibleMoves({\n      dir,\n      col,\n      row\n    }, matrixSize, movesLeft - 1, [...moves, dir]);\n  } else {\n    return {\n      moves,\n      endPosition: startPosition\n    };\n  }\n};\n\nconst Matrix = () => {\n  _s();\n\n  const [matrixSize, setMatrixSize] = useState(3);\n  const [startPosition, setStartPosition] = useState(getRandomPoint(matrixSize));\n  const [endPosition, setEndPosition] = useState({\n    dir: '',\n    col: 0,\n    row: 0\n  });\n  const [possibleMoves, setPossibleMoves] = useState([]);\n\n  const matrixSizeHandler = e => {\n    setMatrixSize(Number(e.currentTarget.value));\n    setStartPosition(getRandomPoint(matrixSize)); //start a new game\n  };\n\n  const checkAnswer = _ref => {\n    let {\n      col,\n      row\n    } = _ref;\n\n    if (endPosition.col === col && endPosition.row === row) {\n      alert('You won');\n      setStartPosition(getRandomPoint(matrixSize)); //start a new game\n    } else {\n      alert('Looser');\n    }\n  };\n\n  useEffect(() => {\n    const {\n      moves,\n      endPosition\n    } = getPossibleMoves( //@ts-ignore\n    startPosition, matrixSize, getMovesAmount(matrixSize));\n    setEndPosition(endPosition);\n    setPossibleMoves(moves);\n  }, [startPosition]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      min: 2,\n      value: matrixSize,\n      onChange: matrixSizeHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setStartPosition(getRandomPoint(matrixSize)),\n      children: \"\\u043D\\u0430\\u0447\\u0430\\u0442\\u044C \\u0438\\u0433\\u0440\\u0443\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: Array.from(Array(matrixSize)).map((row, rowIndex) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex'\n          },\n          children: Array.from(Array(matrixSize)).map((column, columnIndex) => /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => checkAnswer({\n              col: columnIndex,\n              row: rowIndex\n            }),\n            style: {\n              color: rowIndex === startPosition.row && columnIndex === startPosition.col && 'green'\n            },\n            children: columnIndex\n          }, columnIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 33\n          }, this))\n        }, rowIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n      children: possibleMoves.map(move => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: move\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 277,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Matrix, \"YE8a8qsiFk83gekOGyIvoc8LJsQ=\");\n\n_c = Matrix;\nexport default Matrix;\n\nvar _c;\n\n$RefreshReg$(_c, \"Matrix\");","map":{"version":3,"names":["React","useEffect","useState","getRandomPoint","matrixSize","row","Math","round","random","col","getMovesAmount","movesAmount","max","getNextMove","startPosition","possibleMoves","push","dir","length","getPossibleMoves","movesLeft","moves","endPosition","Matrix","setMatrixSize","setStartPosition","setEndPosition","setPossibleMoves","matrixSizeHandler","e","Number","currentTarget","value","checkAnswer","alert","Array","from","map","rowIndex","display","column","columnIndex","color","move"],"sources":["/Users/manchiko/amakids-labyrinth-test-task/src/components/Matrix/Matrix.tsx"],"sourcesContent":["// import React, {useEffect, useState} from \"react\";\n// import {MatrixBlock, MatrixColumn, MatrixRow, MatrixWrapper} from \"./MatrixStyles\";\n// import {useDispatch, useSelector} from \"react-redux\";\n// import {AppRootStateType} from \"../../state/store\";\n// import {createMatrixAC, PointType, setMatrixSizeAC, setStartCoordinatesAC,} from \"../../state/reducer\";\n//\n// export const Matrix = () => {\n//     const dispatch = useDispatch()\n//     const [movesArr, setMovesArr] = useState<Array<string>>([])\n//     const matrix = useSelector<AppRootStateType, Array<Array<number>>>(state => state.matrix.matrix)\n//     const matrixSize = useSelector<AppRootStateType, number>(state => state.matrix.matrixSize)\n//     const startCoordinates = useSelector<AppRootStateType, PointType>(state => state.matrix.startPoint)\n//     const endCoordinates = useSelector<AppRootStateType, PointType>(state => state.matrix.endPoint)\n//     console.log('END ', endCoordinates)\n//     // console.log('START ', startCoordinates)\n//     const matrixSizeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n//         dispatch(setMatrixSizeAC(Number(e.currentTarget.value)))\n//     }\n//     const matrixStart = (matrixSize: number) => {\n//         dispatch(setStartCoordinatesAC(matrixSize))\n//         matrixMove()\n//     }\n//\n//     const matrixMove = (moves: number = 5) => {\n//         // debugger\n//         if (endCoordinates.row !== 0) {\n//             console.log(endCoordinates.row)\n//             console.log('1st if ', endCoordinates.row)\n//             setMovesArr(moveArr => ([...moveArr, 'moveUp']))\n//             // dispatch(moveUpAC())\n//         }\n//         if (endCoordinates.row !== matrix.length - 1) {\n//             console.log('2st if ', endCoordinates.row)\n//             setMovesArr(moveArr => ([...moveArr, 'moveDown']))\n//             // dispatch(moveDownAC())\n//         }\n//         if (endCoordinates.column !== 0) {\n//             console.log('3th if ', endCoordinates.column)\n//             setMovesArr(moveArr => ([...moveArr, 'moveLeft']))\n//             // dispatch(moveLeftAC())\n//         }\n//         if (endCoordinates.column !== matrix.length - 1) {\n//             console.log('4th if ', endCoordinates.column)\n//             setMovesArr(moveArr => ([...moveArr, 'moveRight']))\n//             // dispatch(moveRightAC())\n//         }\n//     }\n//     console.log(movesArr)\n//\n//\n//     const getRandomPoint = (matrixSize: number) => {\n//         const row = Math.round(Math.random() * (matrixSize - 1));\n//         const col = Math.round(Math.random() * (matrixSize - 1));\n//         return {row, col};\n//     };\n//\n//     const getMovesAmount = (matrixSize: number) => {\n//         const movesAmount = 10 + (matrixSize - 3) * 5;\n//         return Math.max(10, movesAmount); // minimum 10 turns\n//     };\n//\n//     const getNextMove = (startPosition: { dir: string| undefined , row: number, col: number }, matrixSize: number) => {\n//         const possibleMoves = [];\n//         if (startPosition.row !== 0) {\n//             possibleMoves.push({\n//                 ...startPosition,\n//                 dir: 'moveUp',\n//                 row: startPosition.row - 1,\n//             });\n//         }\n//         if (startPosition.row !== matrixSize - 1) {\n//             possibleMoves.push({\n//                 ...startPosition,\n//                 dir: 'moveDown',\n//                 row: startPosition.row + 1,\n//             });\n//         }\n//         if (startPosition.col !== 0) {\n//             possibleMoves.push({\n//                 ...startPosition,\n//                 dir: 'moveLeft',\n//                 col: startPosition.col - 1,\n//             });\n//         }\n//         if (startPosition.col !== matrixSize - 1) {\n//             possibleMoves.push({\n//                 ...startPosition,\n//                 dir: 'moveRight',\n//                 col: startPosition.col + 1,\n//             });\n//         }\n//\n//         return possibleMoves[Math.round(Math.random() * (possibleMoves.length - 1))];\n//     };\n//\n//     const getPossibleMoves = (startPosition:\n//                                   { dir: string|undefined, row: number, col: number },\n//                               matrixSize: number,\n//                               movesLeft: number,\n//                               moves: Array<string> = []): { endPosition: { dir: string| undefined; row: number; col: number }; moves: Array<string> } => {\n//         if (movesLeft > 0) {\n//             const {dir, col, row} = getNextMove(startPosition, matrixSize);\n//             return getPossibleMoves({dir, col, row}, matrixSize, movesLeft - 1, [\n//                 ...moves,\n//                 dir,\n//             ]);\n//         } else {\n//             return {moves, endPosition: startPosition};\n//         }\n//     };\n//\n//     const Matrix = () => {\n//         const [matrixSize, setMatrixSize] = useState(3);\n//         const [startPosition, setStartPosition] = useState<{dir?: string|undefined, row: number; col: number; }>(\n//             getRandomPoint(matrixSize)\n//         );\n//         const [endPosition, setEndPosition] = useState<{dir?: string,col: number, row: number}>({dir: '',col: 0, row: 0});\n//         const [possibleMoves, setPossibleMoves] = useState<Array<string>>([]);\n//\n//         const matrixSizeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n//             setMatrixSize(Number(e.currentTarget.value));\n//             setStartPosition(getRandomPoint(matrixSize)); //start a new game\n//         };\n//\n//         const checkAnswer = ({col, row}: {col: number,row: number}) => {\n//             if (endPosition.col === col && endPosition.row === row) {\n//                 alert('You won');\n//                 setStartPosition(getRandomPoint(matrixSize)); //start a new game\n//             } else {\n//                 alert('Looser');\n//             }\n//         };\n//\n//         useEffect(() => {\n//             const {moves, endPosition} = getPossibleMoves(\n//                 startPosition,\n//                 matrixSize,\n//                 getMovesAmount(matrixSize)\n//             );\n//             setEndPosition(endPosition);\n//             setPossibleMoves(moves);\n//         }, [startPosition]);\n//\n//\n//         useEffect(() => {\n//             dispatch(createMatrixAC(matrixSize))\n//         }, [matrixSize])\n//\n//         return (\n//             <MatrixWrapper>\n//                 <input type='number'\n//                        value={matrixSize}\n//                        onChange={matrixSizeHandler}/>\n//                 <button onClick={() => matrixStart(matrixSize)}>начать игру</button>\n//                 <MatrixBlock>\n//                     {\n//                         matrix.map((row, rowIndex) => {\n//                             return <MatrixRow key={rowIndex}>\n//                                 {matrix[rowIndex].map((column, columnIndex) =>\n//                                     <MatrixColumn\n//                                         rowIndex={rowIndex}\n//                                         startRow={startCoordinates.row}\n//                                         endRow={endCoordinates.row}\n//                                         startColumn={startCoordinates.column}\n//                                         endColumn={endCoordinates.column}\n//                                         columnIndex={columnIndex}\n//                                         key={columnIndex}\n//                                     >\n//                                         {column}\n//                                     </MatrixColumn>)}\n//                             </MatrixRow>\n//                         })\n//                     }\n//                 </MatrixBlock>\n//             </MatrixWrapper>\n//         );\n//     }\nimport React, { useEffect, useState } from 'react';\n\nconst getRandomPoint = (matrixSize: number) => {\n        const row = Math.round(Math.random() * (matrixSize - 1));\n        const col = Math.round(Math.random() * (matrixSize - 1));\n        return {row, col};\n    };\n\n    const getMovesAmount = (matrixSize: number) => {\n        const movesAmount = 10 + (matrixSize - 3) * 5;\n        return Math.max(10, movesAmount); // minimum 10 turns\n    };\n\nconst getNextMove = (startPosition: { dir: string| undefined , row: number, col: number }, matrixSize: number) => {\n        const possibleMoves = [];\n        if (startPosition.row !== 0) {\n            possibleMoves.push({\n                ...startPosition,\n                dir: 'moveUp',\n                row: startPosition.row - 1,\n            });\n        }\n        if (startPosition.row !== matrixSize - 1) {\n            possibleMoves.push({\n                ...startPosition,\n                dir: 'moveDown',\n                row: startPosition.row + 1,\n            });\n        }\n        if (startPosition.col !== 0) {\n            possibleMoves.push({\n                ...startPosition,\n                dir: 'moveLeft',\n                col: startPosition.col - 1,\n            });\n        }\n        if (startPosition.col !== matrixSize - 1) {\n            possibleMoves.push({\n                ...startPosition,\n                dir: 'moveRight',\n                col: startPosition.col + 1,\n            });\n        }\n\n        return possibleMoves[Math.round(Math.random() * (possibleMoves.length - 1))];\n    };\n\n\nconst getPossibleMoves = (startPosition:\n                                  { dir: string|undefined, row: number, col: number },\n                              matrixSize: number,\n                              movesLeft: number,\n                              moves: Array<string> = []): { endPosition: { dir: string| undefined; row: number; col: number }; moves: Array<string> } => {\n        if (movesLeft > 0) {\n            const {dir, col, row} = getNextMove(startPosition, matrixSize);\n            return getPossibleMoves({dir, col, row}, matrixSize, movesLeft - 1, [\n                ...moves,\n                dir,\n            ]);\n        } else {\n            return {moves, endPosition: startPosition};\n        }\n    };\n\nconst Matrix = () => {\n    const [matrixSize, setMatrixSize] = useState(3);\n        const [startPosition, setStartPosition] = useState<{dir?: string|undefined, row: number; col: number; }>(\n            getRandomPoint(matrixSize)\n        );\n        const [endPosition, setEndPosition] = useState<{dir?: string,col: number, row: number}>({dir: '',col: 0, row: 0});\n        const [possibleMoves, setPossibleMoves] = useState<Array<string>>([]);\n\n\n    const matrixSizeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setMatrixSize(Number(e.currentTarget.value));\n        setStartPosition(getRandomPoint(matrixSize)); //start a new game\n    };\n\n    const checkAnswer = ({col, row}: {col: number,row: number}) => {\n            if (endPosition.col === col && endPosition.row === row) {\n                alert('You won');\n                setStartPosition(getRandomPoint(matrixSize)); //start a new game\n            } else {\n                alert('Looser');\n            }\n        };\n\n    useEffect(() => {\n        const { moves, endPosition } = getPossibleMoves(\n            //@ts-ignore\n            startPosition,\n            matrixSize,\n            getMovesAmount(matrixSize)\n        );\n        setEndPosition(endPosition);\n        setPossibleMoves(moves);\n    }, [startPosition]);\n\n    return (\n        <div>\n            <input\n                type=\"number\"\n                min={2}\n                value={matrixSize}\n                onChange={matrixSizeHandler}\n            />\n            <button onClick={() => setStartPosition(getRandomPoint(matrixSize))}>\n                начать игру\n            </button>\n            <div>\n                {Array.from(Array(matrixSize)).map((row, rowIndex) => {\n                    return (\n                        <div key={rowIndex} style={{ display: 'flex' }}>\n                            {Array.from(Array(matrixSize)).map((column, columnIndex) => (\n                                <button\n                                    key={columnIndex}\n                                    onClick={() =>\n                                        checkAnswer({ col: columnIndex, row: rowIndex })\n                                    }\n                                    style={{\n                                        color:\n                                            rowIndex === startPosition.row &&\n                                            columnIndex === startPosition.col &&\n                                            'green',\n                                    }}\n                                >\n                                    {columnIndex}\n                                </button>\n                            ))}\n                        </div>\n                    );\n                })}\n            </div>\n            <ol>\n                {possibleMoves.map((move) => (\n                    <li>{move}</li>\n                ))}\n            </ol>\n        </div>\n    );\n};\n\nexport default Matrix;\n"],"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"},"metadata":{},"sourceType":"module"}