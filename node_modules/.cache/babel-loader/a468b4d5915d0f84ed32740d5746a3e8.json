{"ast":null,"code":"var _jsxFileName = \"/Users/manchiko/amakids-labyrinth-test-task/src/components/Matrix/Matrix.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport { MatrixBlock, MatrixColumn, MatrixRow, MatrixWrapper } from \"./MatrixStyles\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { createMatrixAC, setMatrixSizeAC, setPossibleMovesAC, setStartPointAC } from \"../../state/reducer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getMovesAmount = matrixSize => {\n  const movesAmount = 10 + (matrixSize - 3) * 5;\n  return Math.max(10, movesAmount);\n};\n\nconst getNextMove = (startPoint, matrixSize) => {\n  const possibleMoves = [];\n\n  if (startPoint.row !== 0) {\n    possibleMoves.push({ ...startPoint,\n      dir: 'moveUp',\n      row: startPoint.row - 1\n    });\n  }\n\n  if (startPoint.row !== matrixSize - 1) {\n    possibleMoves.push({ ...startPoint,\n      dir: 'moveDown',\n      row: startPoint.row + 1\n    });\n  }\n\n  if (startPoint.column !== 0) {\n    possibleMoves.push({ ...startPoint,\n      dir: 'moveLeft',\n      col: startPoint.column - 1\n    });\n  }\n\n  if (startPoint.column !== matrixSize - 1) {\n    possibleMoves.push({ ...startPoint,\n      dir: 'moveRight',\n      col: startPoint.column + 1\n    });\n  }\n\n  return possibleMoves[Math.round(Math.random() * (possibleMoves.length - 1))];\n};\n\nconst getPossibleMoves = function (startCoordinates, matrixSize, movesLeft) {\n  let moves = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n\n  if (movesLeft > 0) {\n    const {\n      dir,\n      column,\n      row\n    } = getNextMove(startCoordinates, matrixSize);\n    return getPossibleMoves({\n      dir,\n      column,\n      row\n    }, matrixSize, movesLeft - 1, [...moves, dir]);\n  } else {\n    return {\n      moves,\n      lastCoordinate: startCoordinates\n    };\n  }\n};\n\nexport const Matrix = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const matrix = useSelector(state => state.matrix.matrix);\n  const matrixSize = useSelector(state => state.matrix.matrixSize);\n  const startPoint = useSelector(state => state.matrix.startPoint);\n  const endPoint = useSelector(state => state.matrix.possibleMoves.lastCoordinate);\n  const possibleMoves = useSelector(state => state.matrix.possibleMoves.moves);\n\n  const matrixSizeHandler = e => {\n    dispatch(setMatrixSizeAC(Number(e.currentTarget.value)));\n  };\n\n  const matrixStart = matrixSize => {\n    debugger;\n    dispatch(setStartPointAC(matrixSize));\n    dispatch(setPossibleMovesAC(getPossibleMoves(startPoint, matrixSize, getMovesAmount(matrixSize))));\n  };\n\n  console.log(possibleMoves);\n  useEffect(() => {\n    dispatch(createMatrixAC(matrixSize));\n  }, [matrixSize]);\n  console.log('MOVES', possibleMoves);\n  console.log('POINT', possibleMoves);\n  useEffect(() => {\n    const {\n      moves,\n      lastCoordinate\n    } = getPossibleMoves(startPoint, matrixSize, getMovesAmount(matrixSize));\n    console.log('start', startPoint);\n    console.log('last', lastCoordinate); // setPossibleMoves(moves);\n  }, [startPoint]);\n  return /*#__PURE__*/_jsxDEV(MatrixWrapper, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      value: matrixSize,\n      onChange: matrixSizeHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => matrixStart(matrixSize) // setStartPosition(getRandomPoint(matrixSize))\n      ,\n      children: \"\\u043D\\u0430\\u0447\\u0430\\u0442\\u044C \\u0438\\u0433\\u0440\\u0443\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MatrixBlock, {\n      children: matrix.map((row, rowIndex) => {\n        return /*#__PURE__*/_jsxDEV(MatrixRow, {\n          children: matrix[rowIndex].map((column, columnIndex) => /*#__PURE__*/_jsxDEV(MatrixColumn, {\n            rowIndex: rowIndex,\n            startRow: startPoint.row,\n            endRow: endPoint.row,\n            startColumn: startPoint.column,\n            endColumn: endPoint.column,\n            columnIndex: columnIndex,\n            children: column\n          }, columnIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 33\n          }, this))\n        }, rowIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 32\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n      children: possibleMoves.map((move, i) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: move\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 9\n  }, this);\n}; //\n// export const Matrix = () => {\n//     const [matrixSize, setMatrixSize] = useState(3);\n//     const [startPosition, setStartPosition] = useState<{dir?: string|undefined, row: number; col: number; }>(\n//         getRandomPoint(matrixSize)\n//     );\n//     const [endPosition, setEndPosition] = useState<{ dir?: string, col: number, row: number }>({\n//         dir: '',\n//         col: 0,\n//         row: 0\n//     });\n//     const [possibleMoves, setPossibleMoves] = useState<Array<string>>([]);\n//\n//\n//     const matrixSizeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n//         setMatrixSize(Number(e.currentTarget.value));\n//         setStartPosition(getRandomPoint(matrixSize)); //start a new game\n//     };\n//\n//     const checkAnswer = ({col, row}: { col: number, row: number }) => {\n//         if (endPosition.col === col && endPosition.row === row) {\n//             alert('You won');\n//             setStartPosition(getRandomPoint(matrixSize)); //start a new game\n//         } else {\n//             alert('Looser');\n//         }\n//     };\n//\n//     useEffect(() => {\n//         const {moves, endPosition} = getPossibleMoves(\n//             startPosition,\n//             matrixSize,\n//             getMovesAmount(matrixSize)\n//         );\n//         setEndPosition(endPosition);\n//         setPossibleMoves(moves);\n//     }, [startPosition]);\n//\n//     return (\n//\n//         <MatrixWrapper>\n//             <input type='number'\n//                    value={matrixSize}\n//                    onChange={matrixSizeHandler}/>\n//             <button onClick={\n//                 // () => matrixStart(matrixSize)\n//                 () => setStartPosition(getRandomPoint(matrixSize))\n//             }>начать игру</button>\n//             <MatrixBlock>\n//                 {\n//                     matrix.map((row, rowIndex) => {\n//                         return <MatrixRow key={rowIndex}>\n//                             {matrix[rowIndex].map((column, columnIndex) =>\n//                                 <MatrixColumn\n//                                     onClick={() =>\n//                                         checkAnswer({col: columnIndex, row: rowIndex})}\n//                                     rowIndex={rowIndex}\n//                                     startRow={startCoordinates.row}\n//                                     endRow={endCoordinates.row}\n//                                     startColumn={startCoordinates.column}\n//                                     endColumn={endCoordinates.column}\n//                                     columnIndex={columnIndex}\n//                                     key={columnIndex}\n//                                 >\n//                                     {column}\n//                                 </MatrixColumn>)}\n//                         </MatrixRow>\n//                     })\n//                 }\n//             </MatrixBlock>\n//             <ol>\n//                 {possibleMoves.map((move,i) => (\n//                     <li key={i}>{move}</li>\n//                 ))}\n//             </ol>\n//         </MatrixWrapper>)}\n//         <div>\n//             <input\n//                 type=\"number\"\n//                 min={2}\n//                 value={matrixSize}\n//                 onChange={matrixSizeHandler}\n//             />\n//             <button onClick={() => setStartPosition(getRandomPoint(matrixSize))}>\n//                 начать игру\n//             </button>\n//             <div>\n//                 {Array.from(Array(matrixSize)).map((row, rowIndex) => {\n//                     return (\n//                         <div key={rowIndex} style={{display: 'flex'}}>\n//                             {Array.from(Array(matrixSize)).map((column, columnIndex) => (\n//                                 <button\n//                                     key={columnIndex}\n//                                     onClick={() =>\n//                                         checkAnswer({col: columnIndex, row: rowIndex})\n//                                     }\n//                                     style={{\n//                                         // @ts-ignore\n//                                         color:\n//                                             rowIndex === startPosition.row &&\n//                                             columnIndex === startPosition.col &&\n//                                             'green',\n//                                     }}\n//                                 >\n//                                     {columnIndex}\n//                                 </button>\n//                             ))}\n//                         </div>\n//                     );\n//                 })}\n//             </div>\n//             <ol>\n//                 {possibleMoves.map((move,i) => (\n//                     <li key={i}>{move}</li>\n//                 ))}\n//             </ol>\n//         </div>\n//     );\n// };\n// export default Matrix;\n\n_s(Matrix, \"IZPLZ12D6MwP9rBjjpV0apZRAzI=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = Matrix;\n\nvar _c;\n\n$RefreshReg$(_c, \"Matrix\");","map":{"version":3,"names":["React","useEffect","MatrixBlock","MatrixColumn","MatrixRow","MatrixWrapper","useDispatch","useSelector","createMatrixAC","setMatrixSizeAC","setPossibleMovesAC","setStartPointAC","getMovesAmount","matrixSize","movesAmount","Math","max","getNextMove","startPoint","possibleMoves","row","push","dir","column","col","round","random","length","getPossibleMoves","startCoordinates","movesLeft","moves","lastCoordinate","Matrix","dispatch","matrix","state","endPoint","matrixSizeHandler","e","Number","currentTarget","value","matrixStart","console","log","map","rowIndex","columnIndex","move","i"],"sources":["/Users/manchiko/amakids-labyrinth-test-task/src/components/Matrix/Matrix.tsx"],"sourcesContent":["import React, {useEffect} from \"react\";\nimport {MatrixBlock, MatrixColumn, MatrixRow, MatrixWrapper} from \"./MatrixStyles\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../state/store\";\nimport {\n    createMatrixAC,\n    MatrixType,\n    PointType,\n    PossibleMovesType,\n    setMatrixSizeAC,\n    setPossibleMovesAC,\n    setStartPointAC,\n} from \"../../state/reducer\";\n\nconst getMovesAmount = (matrixSize: number) => {\n    const movesAmount = 10 + (matrixSize - 3) * 5;\n    return Math.max(10, movesAmount);\n};\n\nconst getNextMove = (startPoint: PointType, matrixSize: number) => {\n    const possibleMoves = [];\n    if (startPoint.row !== 0) {\n        possibleMoves.push({\n            ...startPoint,\n            dir: 'moveUp',\n            row: startPoint.row - 1,\n        });\n    }\n    if (startPoint.row !== matrixSize - 1) {\n        possibleMoves.push({\n            ...startPoint,\n            dir: 'moveDown',\n            row: startPoint.row + 1,\n        });\n    }\n    if (startPoint.column !== 0) {\n        possibleMoves.push({\n            ...startPoint,\n            dir: 'moveLeft',\n            col: startPoint.column - 1,\n        });\n    }\n    if (startPoint.column !== matrixSize - 1) {\n        possibleMoves.push({\n            ...startPoint,\n            dir: 'moveRight',\n            col: startPoint.column + 1,\n        });\n    }\n    return possibleMoves[Math.round(Math.random() * (possibleMoves.length - 1))];\n};\n\nconst getPossibleMoves = (\n    startCoordinates: PointType,\n    matrixSize: number,\n    movesLeft: number,\n    moves: Array<string> = []):\n    { lastCoordinate: PointType; moves: Array<string> } => {\n    if (movesLeft > 0) {\n        const {dir, column, row} = getNextMove(startCoordinates, matrixSize);\n        return getPossibleMoves({dir, column, row}, matrixSize, movesLeft - 1, [\n            ...moves,\n            dir,\n        ]);\n    } else {\n        return {moves, lastCoordinate: startCoordinates};\n    }\n};\n\nexport const Matrix = () => {\n    const dispatch = useDispatch()\n    const matrix = useSelector<AppRootStateType, MatrixType>(state => state.matrix.matrix)\n    const matrixSize = useSelector<AppRootStateType, number>(state => state.matrix.matrixSize)\n    const startPoint = useSelector<AppRootStateType, PointType>(state => state.matrix.startPoint)\n    const endPoint = useSelector<AppRootStateType, PointType>(state => state.matrix.possibleMoves.lastCoordinate)\n    const possibleMoves = useSelector<AppRootStateType, Array<string>>(state => state.matrix.possibleMoves.moves)\n    const matrixSizeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n        dispatch(setMatrixSizeAC(Number(e.currentTarget.value)))\n    }\n    const matrixStart = (matrixSize: number) => {\n        debugger\n        dispatch(setStartPointAC(matrixSize))\n        dispatch(setPossibleMovesAC(getPossibleMoves(startPoint, matrixSize, getMovesAmount(matrixSize))))\n    }\n    console.log(possibleMoves)\n\n    useEffect(() => {\n        dispatch(createMatrixAC(matrixSize))\n    }, [matrixSize])\n    console.log('MOVES', possibleMoves)\n    console.log('POINT', possibleMoves)\n    useEffect(() => {\n        const { moves, lastCoordinate } = getPossibleMoves(\n            startPoint,\n            matrixSize,\n            getMovesAmount(matrixSize)\n        );\n        console.log('start',startPoint)\n        console.log('last',lastCoordinate);\n        // setPossibleMoves(moves);\n    }, [startPoint]);\n    return (\n        <MatrixWrapper>\n            <input type='number'\n                   value={matrixSize}\n                   onChange={matrixSizeHandler}/>\n            <button onClick={() =>\n                matrixStart(matrixSize)\n                // setStartPosition(getRandomPoint(matrixSize))\n            }>начать игру\n            </button>\n            <MatrixBlock>\n                {\n                    matrix.map((row, rowIndex) => {\n                        return <MatrixRow key={rowIndex}>\n                            {matrix[rowIndex].map((column, columnIndex) =>\n                                <MatrixColumn\n                                    rowIndex={rowIndex}\n                                    startRow={startPoint.row}\n                                    endRow={endPoint.row}\n                                    startColumn={startPoint.column}\n                                    endColumn={endPoint.column}\n                                    columnIndex={columnIndex}\n                                    key={columnIndex}\n                                >\n                                    {column}\n                                </MatrixColumn>)}\n                        </MatrixRow>\n                    })\n                }\n            </MatrixBlock>\n            <ol>\n                {possibleMoves.map((move, i) => (\n                    <li key={i}>{move}</li>\n                ))}\n            </ol>\n        </MatrixWrapper>\n    );\n}\n\n\n//\n\n// export const Matrix = () => {\n//     const [matrixSize, setMatrixSize] = useState(3);\n//     const [startPosition, setStartPosition] = useState<{dir?: string|undefined, row: number; col: number; }>(\n//         getRandomPoint(matrixSize)\n//     );\n//     const [endPosition, setEndPosition] = useState<{ dir?: string, col: number, row: number }>({\n//         dir: '',\n//         col: 0,\n//         row: 0\n//     });\n//     const [possibleMoves, setPossibleMoves] = useState<Array<string>>([]);\n//\n//\n//     const matrixSizeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n//         setMatrixSize(Number(e.currentTarget.value));\n//         setStartPosition(getRandomPoint(matrixSize)); //start a new game\n//     };\n//\n//     const checkAnswer = ({col, row}: { col: number, row: number }) => {\n//         if (endPosition.col === col && endPosition.row === row) {\n//             alert('You won');\n//             setStartPosition(getRandomPoint(matrixSize)); //start a new game\n//         } else {\n//             alert('Looser');\n//         }\n//     };\n//\n//     useEffect(() => {\n//         const {moves, endPosition} = getPossibleMoves(\n//             startPosition,\n//             matrixSize,\n//             getMovesAmount(matrixSize)\n//         );\n//         setEndPosition(endPosition);\n//         setPossibleMoves(moves);\n//     }, [startPosition]);\n//\n//     return (\n//\n//         <MatrixWrapper>\n//             <input type='number'\n//                    value={matrixSize}\n//                    onChange={matrixSizeHandler}/>\n//             <button onClick={\n//                 // () => matrixStart(matrixSize)\n//                 () => setStartPosition(getRandomPoint(matrixSize))\n//             }>начать игру</button>\n//             <MatrixBlock>\n//                 {\n//                     matrix.map((row, rowIndex) => {\n//                         return <MatrixRow key={rowIndex}>\n//                             {matrix[rowIndex].map((column, columnIndex) =>\n//                                 <MatrixColumn\n//                                     onClick={() =>\n//                                         checkAnswer({col: columnIndex, row: rowIndex})}\n//                                     rowIndex={rowIndex}\n//                                     startRow={startCoordinates.row}\n//                                     endRow={endCoordinates.row}\n//                                     startColumn={startCoordinates.column}\n//                                     endColumn={endCoordinates.column}\n//                                     columnIndex={columnIndex}\n//                                     key={columnIndex}\n//                                 >\n//                                     {column}\n//                                 </MatrixColumn>)}\n//                         </MatrixRow>\n//                     })\n//                 }\n//             </MatrixBlock>\n//             <ol>\n//                 {possibleMoves.map((move,i) => (\n//                     <li key={i}>{move}</li>\n//                 ))}\n//             </ol>\n//         </MatrixWrapper>)}\n\n\n//         <div>\n//             <input\n//                 type=\"number\"\n//                 min={2}\n//                 value={matrixSize}\n//                 onChange={matrixSizeHandler}\n//             />\n//             <button onClick={() => setStartPosition(getRandomPoint(matrixSize))}>\n//                 начать игру\n//             </button>\n//             <div>\n//                 {Array.from(Array(matrixSize)).map((row, rowIndex) => {\n//                     return (\n//                         <div key={rowIndex} style={{display: 'flex'}}>\n//                             {Array.from(Array(matrixSize)).map((column, columnIndex) => (\n//                                 <button\n//                                     key={columnIndex}\n//                                     onClick={() =>\n//                                         checkAnswer({col: columnIndex, row: rowIndex})\n//                                     }\n//                                     style={{\n//                                         // @ts-ignore\n//                                         color:\n//                                             rowIndex === startPosition.row &&\n//                                             columnIndex === startPosition.col &&\n//                                             'green',\n//                                     }}\n//                                 >\n//                                     {columnIndex}\n//                                 </button>\n//                             ))}\n//                         </div>\n//                     );\n//                 })}\n//             </div>\n//             <ol>\n//                 {possibleMoves.map((move,i) => (\n//                     <li key={i}>{move}</li>\n//                 ))}\n//             </ol>\n//         </div>\n//     );\n// };\n\n// export default Matrix;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}